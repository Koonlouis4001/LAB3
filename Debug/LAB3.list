
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c0  080029c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029c8  080029c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080029dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080029dc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006993  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001317  00000000  00000000  000269cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00027ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  000283d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014fcf  00000000  00000000  00028a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005cb4  00000000  00000000  0003d9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085a12  00000000  00000000  000436a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c90b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b80  00000000  00000000  000c9130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002990 	.word	0x08002990

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002990 	.word	0x08002990

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb18 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80e 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8f2 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8c6 	bl	8000678 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ec:	f000 f872 	bl	80005d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADCPollingMethodInit();
 80004f0:	f000 f95c 	bl	80007ac <ADCPollingMethodInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //read analog
	  ADCPollingMethodUpdate();
 80004f4:	f000 f978 	bl	80007e8 <ADCPollingMethodUpdate>
	  ADCModeChangeUpdate();
 80004f8:	f000 f9ae 	bl	8000858 <ADCModeChangeUpdate>
	  ADCPollingMethodUpdate();
 80004fc:	e7fa      	b.n	80004f4 <main+0x1c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fa36 	bl	8002980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000570:	2310      	movs	r3, #16
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057a:	2304      	movs	r3, #4
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057e:	2304      	movs	r3, #4
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f001 f9aa 	bl	80018e0 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 f99b 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fc04 	bl	8001dc0 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005be:	f000 f985 	bl	80008cc <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_ADC1_Init+0x98>)
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <MX_ADC1_Init+0x9c>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC1_Init+0x98>)
 80005ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_ADC1_Init+0x98>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_ADC1_Init+0xa0>)
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_ADC1_Init+0x98>)
 8000622:	2201      	movs	r2, #1
 8000624:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_ADC1_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_ADC1_Init+0x98>)
 8000636:	f000 fadd 	bl	8000bf4 <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000640:	f000 f944 	bl	80008cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC1_Init+0x98>)
 8000656:	f000 fc7b 	bl	8000f50 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000660:	f000 f934 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000060 	.word	0x20000060
 8000670:	40012000 	.word	0x40012000
 8000674:	0f000001 	.word	0x0f000001

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fd78 	bl	80021a4 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f907 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000a8 	.word	0x200000a8
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	; (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000758:	f001 f8a8 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_GPIO_Init+0xdc>)
 8000772:	f000 ff01 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xd4>)
 800078e:	f000 fef3 	bl	8001578 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	10210000 	.word	0x10210000
 80007a8:	40020800 	.word	0x40020800

080007ac <ADCPollingMethodInit>:

/* USER CODE BEGIN 4 */

void ADCPollingMethodInit()
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	//PA0 - ADC IN0
	ADCChannel[0].Config.Channel = ADC_CHANNEL_0;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <ADCPollingMethodInit+0x34>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
	ADCChannel[0].Config.Rank = 1;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <ADCPollingMethodInit+0x34>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
	ADCChannel[0].Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <ADCPollingMethodInit+0x34>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]

	//Temp
	ADCChannel[1].Config.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <ADCPollingMethodInit+0x34>)
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <ADCPollingMethodInit+0x38>)
 80007c6:	615a      	str	r2, [r3, #20]
	ADCChannel[1].Config.Rank = 1;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <ADCPollingMethodInit+0x34>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	619a      	str	r2, [r3, #24]
	ADCChannel[1].Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <ADCPollingMethodInit+0x34>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028
 80007e4:	10000012 	.word	0x10000012

080007e8 <ADCPollingMethodUpdate>:

void ADCPollingMethodUpdate()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	for(int i = 0;i<2;i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	e026      	b.n	8000842 <ADCPollingMethodUpdate+0x5a>
	{
		//select channel
		HAL_ADC_ConfigChannel(&hadc1, &ADCChannel[i].Config);
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <ADCPollingMethodUpdate+0x68>)
 8000800:	4413      	add	r3, r2
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <ADCPollingMethodUpdate+0x6c>)
 8000806:	f000 fba3 	bl	8000f50 <HAL_ADC_ConfigChannel>
		//ADC Sampling ,Convert
		HAL_ADC_Start(&hadc1);
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <ADCPollingMethodUpdate+0x6c>)
 800080c:	f000 fa36 	bl	8000c7c <HAL_ADC_Start>
		//Wait ADC
		if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000810:	210a      	movs	r1, #10
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <ADCPollingMethodUpdate+0x6c>)
 8000814:	f000 fb0b 	bl	8000e2e <HAL_ADC_PollForConversion>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10b      	bne.n	8000836 <ADCPollingMethodUpdate+0x4e>
		{
			//Get Value
			ADCChannel[i].Data = HAL_ADC_GetValue(&hadc1);
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <ADCPollingMethodUpdate+0x6c>)
 8000820:	f000 fb89 	bl	8000f36 <HAL_ADC_GetValue>
 8000824:	490a      	ldr	r1, [pc, #40]	; (8000850 <ADCPollingMethodUpdate+0x68>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	440b      	add	r3, r1
 8000832:	3310      	adds	r3, #16
 8000834:	6018      	str	r0, [r3, #0]
		}
		//Stop
		HAL_ADC_Stop(&hadc1);
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <ADCPollingMethodUpdate+0x6c>)
 8000838:	f000 fac6 	bl	8000dc8 <HAL_ADC_Stop>
	for(int i = 0;i<2;i++)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	ddd5      	ble.n	80007f4 <ADCPollingMethodUpdate+0xc>
	}


}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000028 	.word	0x20000028
 8000854:	20000060 	.word	0x20000060

08000858 <ADCModeChangeUpdate>:

void ADCModeChangeUpdate()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - ButtonTimeStamp >= 100)
 800085c:	f000 f9be 	bl	8000bdc <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <ADCModeChangeUpdate+0x64>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	2b63      	cmp	r3, #99	; 0x63
 800086a:	d924      	bls.n	80008b6 <ADCModeChangeUpdate+0x5e>
	{
		ButtonTimeStamp = HAL_GetTick();
 800086c:	f000 f9b6 	bl	8000bdc <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <ADCModeChangeUpdate+0x64>)
 8000874:	601a      	str	r2, [r3, #0]
		User_Button[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	4811      	ldr	r0, [pc, #68]	; (80008c0 <ADCModeChangeUpdate+0x68>)
 800087c:	f000 fffe 	bl	800187c <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <ADCModeChangeUpdate+0x6c>)
 8000886:	701a      	strb	r2, [r3, #0]
		if(User_Button[1] == GPIO_PIN_SET && User_Button[0] == GPIO_PIN_RESET)
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <ADCModeChangeUpdate+0x6c>)
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10e      	bne.n	80008ae <ADCModeChangeUpdate+0x56>
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <ADCModeChangeUpdate+0x6c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10a      	bne.n	80008ae <ADCModeChangeUpdate+0x56>
		{
			if(ADCMode == 0)
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <ADCModeChangeUpdate+0x70>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d103      	bne.n	80008a8 <ADCModeChangeUpdate+0x50>
			{
				ADCMode = 1;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ADCModeChangeUpdate+0x70>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e002      	b.n	80008ae <ADCModeChangeUpdate+0x56>
			}
			else
			{
				ADCMode = 0;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <ADCModeChangeUpdate+0x70>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
			}
		}
		User_Button[1] = User_Button[0];
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ADCModeChangeUpdate+0x6c>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <ADCModeChangeUpdate+0x6c>)
 80008b4:	705a      	strb	r2, [r3, #1]
	}
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000054 	.word	0x20000054
 80008c0:	40020800 	.word	0x40020800
 80008c4:	2000005c 	.word	0x2000005c
 80008c8:	20000050 	.word	0x20000050

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <Error_Handler+0x6>

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000912:	2007      	movs	r0, #7
 8000914:	f000 fdfc 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_ADC_MspInit+0x7c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d127      	bne.n	8000996 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_ADC_MspInit+0x80>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <HAL_ADC_MspInit+0x80>)
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_ADC_MspInit+0x80>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_ADC_MspInit+0x80>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_ADC_MspInit+0x80>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_ADC_MspInit+0x80>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097e:	2301      	movs	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_ADC_MspInit+0x84>)
 8000992:	f000 fdf1 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40012000 	.word	0x40012000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a22:	f000 fda9 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f894 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <SystemInit+0x28>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <SystemInit+0x28>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SystemInit+0x28>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000adc:	f842 3b04 	str.w	r3, [r2], #4

08000ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd3 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f001 ff25 	bl	8002938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fcf3 	bl	80004d8 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000af8:	080029d0 	.word	0x080029d0
  ldr  r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b08:	200000ec 	.word	0x200000ec

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 fce9 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fec6 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fcf3 	bl	800155e <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 fcc9 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200000e8 	.word	0x200000e8

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200000e8 	.word	0x200000e8

08000bf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e033      	b.n	8000c72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d109      	bne.n	8000c26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fe86 	bl	8000924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d118      	bne.n	8000c64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c3a:	f023 0302 	bic.w	r3, r3, #2
 8000c3e:	f043 0202 	orr.w	r2, r3, #2
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 fab4 	bl	80011b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f023 0303 	bic.w	r3, r3, #3
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40
 8000c62:	e001      	b.n	8000c68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d101      	bne.n	8000c96 <HAL_ADC_Start+0x1a>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e08a      	b.n	8000dac <HAL_ADC_Start+0x130>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d018      	beq.n	8000cde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0201 	orr.w	r2, r2, #1
 8000cba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <HAL_ADC_Start+0x13c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <HAL_ADC_Start+0x140>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9a      	lsrs	r2, r3, #18
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cd0:	e002      	b.n	8000cd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f9      	bne.n	8000cd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d15e      	bne.n	8000daa <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d2a:	d106      	bne.n	8000d3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	f023 0206 	bic.w	r2, r3, #6
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	645a      	str	r2, [r3, #68]	; 0x44
 8000d38:	e002      	b.n	8000d40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_ADC_Start+0x144>)
 8000d4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d54:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10f      	bne.n	8000d82 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d11c      	bne.n	8000daa <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	e013      	b.n	8000daa <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_ADC_Start+0x148>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d10e      	bne.n	8000daa <HAL_ADC_Start+0x12e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d107      	bne.n	8000daa <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000da8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	40012300 	.word	0x40012300
 8000dc4:	40012000 	.word	0x40012000

08000dc8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Stop+0x16>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e021      	b.n	8000e22 <HAL_ADC_Stop+0x5a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d109      	bne.n	8000e18 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	f043 0201 	orr.w	r2, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4a:	d113      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e5a:	d10b      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f043 0220 	orr.w	r2, r3, #32
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e05c      	b.n	8000f2e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e74:	f7ff feb2 	bl	8000bdc <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e7a:	e01a      	b.n	8000eb2 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e82:	d016      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_PollForConversion+0x6c>
 8000e8a:	f7ff fea7 	bl	8000bdc <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d20b      	bcs.n	8000eb2 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f043 0204 	orr.w	r2, r3, #4
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e03d      	b.n	8000f2e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d1dd      	bne.n	8000e7c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f06f 0212 	mvn.w	r2, #18
 8000ec8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d123      	bne.n	8000f2c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11f      	bne.n	8000f2c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_ADC_ConfigChannel+0x1c>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e113      	b.n	8001194 <HAL_ADC_ConfigChannel+0x244>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d925      	bls.n	8000fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68d9      	ldr	r1, [r3, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b1e      	subs	r3, #30
 8000f92:	2207      	movs	r2, #7
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68d9      	ldr	r1, [r3, #12]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4403      	add	r3, r0
 8000fba:	3b1e      	subs	r3, #30
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	e022      	b.n	800100e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6919      	ldr	r1, [r3, #16]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	2207      	movs	r2, #7
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	400a      	ands	r2, r1
 8000fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6919      	ldr	r1, [r3, #16]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4403      	add	r3, r0
 8001004:	409a      	lsls	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b06      	cmp	r3, #6
 8001014:	d824      	bhi.n	8001060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	3b05      	subs	r3, #5
 8001028:	221f      	movs	r2, #31
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	400a      	ands	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3b05      	subs	r3, #5
 8001052:	fa00 f203 	lsl.w	r2, r0, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	e04c      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d824      	bhi.n	80010b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b23      	subs	r3, #35	; 0x23
 800107a:	221f      	movs	r2, #31
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43da      	mvns	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	400a      	ands	r2, r1
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b23      	subs	r3, #35	; 0x23
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
 80010b0:	e023      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b41      	subs	r3, #65	; 0x41
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	400a      	ands	r2, r1
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b41      	subs	r3, #65	; 0x41
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_ADC_ConfigChannel+0x250>)
 80010fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <HAL_ADC_ConfigChannel+0x254>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d10f      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x1d8>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b12      	cmp	r3, #18
 800110e:	d10b      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_ADC_ConfigChannel+0x254>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_ADC_ConfigChannel+0x23a>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <HAL_ADC_ConfigChannel+0x258>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_ADC_ConfigChannel+0x1f4>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b11      	cmp	r3, #17
 8001142:	d122      	bne.n	800118a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_ADC_ConfigChannel+0x258>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d111      	bne.n	800118a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_ADC_ConfigChannel+0x25c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_ADC_ConfigChannel+0x260>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9a      	lsrs	r2, r3, #18
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800117c:	e002      	b.n	8001184 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3b01      	subs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f9      	bne.n	800117e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40012300 	.word	0x40012300
 80011a4:	40012000 	.word	0x40012000
 80011a8:	10000012 	.word	0x10000012
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83

080011b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011bc:	4b79      	ldr	r3, [pc, #484]	; (80013a4 <ADC_Init+0x1f0>)
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	431a      	orrs	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	021a      	lsls	r2, r3, #8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800120c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800122e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6899      	ldr	r1, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	4a58      	ldr	r2, [pc, #352]	; (80013a8 <ADC_Init+0x1f4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d022      	beq.n	8001292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800125a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6899      	ldr	r1, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800127c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6899      	ldr	r1, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e00f      	b.n	80012b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0202 	bic.w	r2, r2, #2
 80012c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6899      	ldr	r1, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7e1b      	ldrb	r3, [r3, #24]
 80012cc:	005a      	lsls	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01b      	beq.n	8001318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6859      	ldr	r1, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	3b01      	subs	r3, #1
 800130c:	035a      	lsls	r2, r3, #13
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	e007      	b.n	8001328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	3b01      	subs	r3, #1
 8001344:	051a      	lsls	r2, r3, #20
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800135c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6899      	ldr	r1, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800136a:	025a      	lsls	r2, r3, #9
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	029a      	lsls	r2, r3, #10
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	609a      	str	r2, [r3, #8]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40012300 	.word	0x40012300
 80013a8:	0f000001 	.word	0x0f000001

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff47 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff5c 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff8e 	bl	8001464 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffb0 	bl	80014cc <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e159      	b.n	8001848 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8148 	bne.w	8001842 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d00b      	beq.n	80015d2 <HAL_GPIO_Init+0x5a>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c6:	2b11      	cmp	r3, #17
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d130      	bne.n	8001634 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0xfc>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b12      	cmp	r3, #18
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a2 	beq.w	8001842 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_GPIO_Init+0x2e4>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a55      	ldr	r2, [pc, #340]	; (800185c <HAL_GPIO_Init+0x2e4>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_GPIO_Init+0x2e4>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <HAL_GPIO_Init+0x2e8>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a48      	ldr	r2, [pc, #288]	; (8001864 <HAL_GPIO_Init+0x2ec>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d019      	beq.n	800177a <HAL_GPIO_Init+0x202>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a47      	ldr	r2, [pc, #284]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0x1fe>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_GPIO_Init+0x2f4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00d      	beq.n	8001772 <HAL_GPIO_Init+0x1fa>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_GPIO_Init+0x2f8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x1f6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_GPIO_Init+0x2fc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_GPIO_Init+0x1f2>
 8001766:	2304      	movs	r3, #4
 8001768:	e008      	b.n	800177c <HAL_GPIO_Init+0x204>
 800176a:	2307      	movs	r3, #7
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x204>
 800176e:	2303      	movs	r3, #3
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x204>
 8001772:	2302      	movs	r3, #2
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x204>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x204>
 800177a:	2300      	movs	r3, #0
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f002 0203 	and.w	r2, r2, #3
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178c:	4934      	ldr	r1, [pc, #208]	; (8001860 <HAL_GPIO_Init+0x2e8>)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_GPIO_Init+0x300>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017be:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <HAL_GPIO_Init+0x300>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_GPIO_Init+0x300>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_GPIO_Init+0x300>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_GPIO_Init+0x300>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a19      	ldr	r2, [pc, #100]	; (8001878 <HAL_GPIO_Init+0x300>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_GPIO_Init+0x300>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_GPIO_Init+0x300>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	f67f aea2 	bls.w	8001594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001850:	bf00      	nop
 8001852:	3724      	adds	r7, #36	; 0x24
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e001      	b.n	800189e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	619a      	str	r2, [r3, #24]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e25b      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d075      	beq.n	80019ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fe:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b04      	cmp	r3, #4
 8001908:	d00c      	beq.n	8001924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001912:	2b08      	cmp	r3, #8
 8001914:	d112      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4b99      	ldr	r3, [pc, #612]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d05b      	beq.n	80019e8 <HAL_RCC_OscConfig+0x108>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d157      	bne.n	80019e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e236      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d106      	bne.n	8001954 <HAL_RCC_OscConfig+0x74>
 8001946:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a90      	ldr	r2, [pc, #576]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0xb0>
 8001978:	4b84      	ldr	r3, [pc, #528]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a83      	ldr	r2, [pc, #524]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f920 	bl	8000bdc <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f91c 	bl	8000bdc <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1fb      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0xc0>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f90c 	bl	8000bdc <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f908 	bl	8000bdc <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1e7      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0xe8>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d063      	beq.n	8001abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x152>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1bb      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4952      	ldr	r1, [pc, #328]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x2b0>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f8c1 	bl	8000bdc <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f8bd 	bl	8000bdc <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e19c      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4940      	ldr	r1, [pc, #256]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x2b0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f8a0 	bl	8000bdc <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f89c 	bl	8000bdc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e17b      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d030      	beq.n	8001b2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x2b4>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f880 	bl	8000bdc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f87c 	bl	8000bdc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e15b      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x200>
 8001afe:	e015      	b.n	8001b2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x2b4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f869 	bl	8000bdc <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f865 	bl	8000bdc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e144      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a0 	beq.w	8001c7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d121      	bne.n	8001bba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f82b 	bl	8000bdc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	e011      	b.n	8001bae <HAL_RCC_OscConfig+0x2ce>
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	42470000 	.word	0x42470000
 8001b94:	42470e80 	.word	0x42470e80
 8001b98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff f81e 	bl	8000bdc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0fd      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <HAL_RCC_OscConfig+0x4d4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	e01c      	b.n	8001c0a <HAL_RCC_OscConfig+0x32a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x312>
 8001bd8:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a76      	ldr	r2, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a73      	ldr	r2, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x32a>
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a70      	ldr	r2, [pc, #448]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfe:	4b6e      	ldr	r3, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	4a6d      	ldr	r2, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d015      	beq.n	8001c3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7fe ffe3 	bl	8000bdc <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7fe ffdf 	bl	8000bdc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0bc      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ee      	beq.n	8001c1a <HAL_RCC_OscConfig+0x33a>
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ffcd 	bl	8000bdc <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7fe ffc9 	bl	8000bdc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0a6      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8092 	beq.w	8001da8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d05c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d141      	bne.n	8001d1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_RCC_OscConfig+0x4dc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ff9d 	bl	8000bdc <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe ff99 	bl	8000bdc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e078      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	019b      	lsls	r3, r3, #6
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
 8001ce8:	4933      	ldr	r1, [pc, #204]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_RCC_OscConfig+0x4dc>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff72 	bl	8000bdc <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7fe ff6e 	bl	8000bdc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e04d      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x41c>
 8001d1a:	e045      	b.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x4dc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe ff5b 	bl	8000bdc <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe ff57 	bl	8000bdc <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e036      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x44a>
 8001d48:	e02e      	b.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e029      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d115      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10d      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40007000 	.word	0x40007000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	42470060 	.word	0x42470060

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fe94 	bl	8000bdc <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe fe90 	bl	8000bdc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fdf4 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	080029a8 	.word	0x080029a8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d007      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x32>
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 80b4 	bne.w	8002120 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fba:	60bb      	str	r3, [r7, #8]
       break;
 8001fbc:	e0b3      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fbe:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fc0:	60bb      	str	r3, [r7, #8]
      break;
 8001fc2:	e0b0      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc4:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d04a      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fda:	4b55      	ldr	r3, [pc, #340]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	099b      	lsrs	r3, r3, #6
 8001fe0:	f04f 0400 	mov.w	r4, #0
 8001fe4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	ea03 0501 	and.w	r5, r3, r1
 8001ff0:	ea04 0602 	and.w	r6, r4, r2
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	4632      	mov	r2, r6
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	0154      	lsls	r4, r2, #5
 8002002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002006:	014b      	lsls	r3, r1, #5
 8002008:	4619      	mov	r1, r3
 800200a:	4622      	mov	r2, r4
 800200c:	1b49      	subs	r1, r1, r5
 800200e:	eb62 0206 	sbc.w	r2, r2, r6
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	f04f 0400 	mov.w	r4, #0
 800201a:	0194      	lsls	r4, r2, #6
 800201c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002020:	018b      	lsls	r3, r1, #6
 8002022:	1a5b      	subs	r3, r3, r1
 8002024:	eb64 0402 	sbc.w	r4, r4, r2
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	00e2      	lsls	r2, r4, #3
 8002032:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002036:	00d9      	lsls	r1, r3, #3
 8002038:	460b      	mov	r3, r1
 800203a:	4614      	mov	r4, r2
 800203c:	195b      	adds	r3, r3, r5
 800203e:	eb44 0406 	adc.w	r4, r4, r6
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	0262      	lsls	r2, r4, #9
 800204c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002050:	0259      	lsls	r1, r3, #9
 8002052:	460b      	mov	r3, r1
 8002054:	4614      	mov	r4, r2
 8002056:	4618      	mov	r0, r3
 8002058:	4621      	mov	r1, r4
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f04f 0400 	mov.w	r4, #0
 8002060:	461a      	mov	r2, r3
 8002062:	4623      	mov	r3, r4
 8002064:	f7fe f8b8 	bl	80001d8 <__aeabi_uldivmod>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e049      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	f04f 0400 	mov.w	r4, #0
 800207a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	ea03 0501 	and.w	r5, r3, r1
 8002086:	ea04 0602 	and.w	r6, r4, r2
 800208a:	4629      	mov	r1, r5
 800208c:	4632      	mov	r2, r6
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	0154      	lsls	r4, r2, #5
 8002098:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800209c:	014b      	lsls	r3, r1, #5
 800209e:	4619      	mov	r1, r3
 80020a0:	4622      	mov	r2, r4
 80020a2:	1b49      	subs	r1, r1, r5
 80020a4:	eb62 0206 	sbc.w	r2, r2, r6
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	f04f 0400 	mov.w	r4, #0
 80020b0:	0194      	lsls	r4, r2, #6
 80020b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020b6:	018b      	lsls	r3, r1, #6
 80020b8:	1a5b      	subs	r3, r3, r1
 80020ba:	eb64 0402 	sbc.w	r4, r4, r2
 80020be:	f04f 0100 	mov.w	r1, #0
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	00e2      	lsls	r2, r4, #3
 80020c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020cc:	00d9      	lsls	r1, r3, #3
 80020ce:	460b      	mov	r3, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	195b      	adds	r3, r3, r5
 80020d4:	eb44 0406 	adc.w	r4, r4, r6
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	02a2      	lsls	r2, r4, #10
 80020e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020e6:	0299      	lsls	r1, r3, #10
 80020e8:	460b      	mov	r3, r1
 80020ea:	4614      	mov	r4, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	4621      	mov	r1, r4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f04f 0400 	mov.w	r4, #0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4623      	mov	r3, r4
 80020fa:	f7fe f86d 	bl	80001d8 <__aeabi_uldivmod>
 80020fe:	4603      	mov	r3, r0
 8002100:	460c      	mov	r4, r1
 8002102:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	3301      	adds	r3, #1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	60bb      	str	r3, [r7, #8]
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002122:	60bb      	str	r3, [r7, #8]
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	68bb      	ldr	r3, [r7, #8]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	00f42400 	.word	0x00f42400
 8002138:	007a1200 	.word	0x007a1200

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002158:	f7ff fff0 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215c:	4601      	mov	r1, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a9b      	lsrs	r3, r3, #10
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	080029b8 	.word	0x080029b8

0800217c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002180:	f7ff ffdc 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002184:	4601      	mov	r1, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0b5b      	lsrs	r3, r3, #13
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	080029b8 	.word	0x080029b8

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e03f      	b.n	8002236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fbee 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f829 	bl	8002240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002282:	f023 030c 	bic.w	r3, r3, #12
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	68f9      	ldr	r1, [r7, #12]
 800228c:	430b      	orrs	r3, r1
 800228e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ae:	f040 818b 	bne.w	80025c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4ac1      	ldr	r2, [pc, #772]	; (80025bc <UART_SetConfig+0x37c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d005      	beq.n	80022c8 <UART_SetConfig+0x88>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4abf      	ldr	r2, [pc, #764]	; (80025c0 <UART_SetConfig+0x380>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f040 80bd 	bne.w	8002442 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022c8:	f7ff ff58 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 80022cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	461d      	mov	r5, r3
 80022d2:	f04f 0600 	mov.w	r6, #0
 80022d6:	46a8      	mov	r8, r5
 80022d8:	46b1      	mov	r9, r6
 80022da:	eb18 0308 	adds.w	r3, r8, r8
 80022de:	eb49 0409 	adc.w	r4, r9, r9
 80022e2:	4698      	mov	r8, r3
 80022e4:	46a1      	mov	r9, r4
 80022e6:	eb18 0805 	adds.w	r8, r8, r5
 80022ea:	eb49 0906 	adc.w	r9, r9, r6
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002302:	4688      	mov	r8, r1
 8002304:	4691      	mov	r9, r2
 8002306:	eb18 0005 	adds.w	r0, r8, r5
 800230a:	eb49 0106 	adc.w	r1, r9, r6
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	461d      	mov	r5, r3
 8002314:	f04f 0600 	mov.w	r6, #0
 8002318:	196b      	adds	r3, r5, r5
 800231a:	eb46 0406 	adc.w	r4, r6, r6
 800231e:	461a      	mov	r2, r3
 8002320:	4623      	mov	r3, r4
 8002322:	f7fd ff59 	bl	80001d8 <__aeabi_uldivmod>
 8002326:	4603      	mov	r3, r0
 8002328:	460c      	mov	r4, r1
 800232a:	461a      	mov	r2, r3
 800232c:	4ba5      	ldr	r3, [pc, #660]	; (80025c4 <UART_SetConfig+0x384>)
 800232e:	fba3 2302 	umull	r2, r3, r3, r2
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	461d      	mov	r5, r3
 800233c:	f04f 0600 	mov.w	r6, #0
 8002340:	46a9      	mov	r9, r5
 8002342:	46b2      	mov	sl, r6
 8002344:	eb19 0309 	adds.w	r3, r9, r9
 8002348:	eb4a 040a 	adc.w	r4, sl, sl
 800234c:	4699      	mov	r9, r3
 800234e:	46a2      	mov	sl, r4
 8002350:	eb19 0905 	adds.w	r9, r9, r5
 8002354:	eb4a 0a06 	adc.w	sl, sl, r6
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002364:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002368:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800236c:	4689      	mov	r9, r1
 800236e:	4692      	mov	sl, r2
 8002370:	eb19 0005 	adds.w	r0, r9, r5
 8002374:	eb4a 0106 	adc.w	r1, sl, r6
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	461d      	mov	r5, r3
 800237e:	f04f 0600 	mov.w	r6, #0
 8002382:	196b      	adds	r3, r5, r5
 8002384:	eb46 0406 	adc.w	r4, r6, r6
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	f7fd ff24 	bl	80001d8 <__aeabi_uldivmod>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	461a      	mov	r2, r3
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <UART_SetConfig+0x384>)
 8002398:	fba3 1302 	umull	r1, r3, r3, r2
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	2164      	movs	r1, #100	; 0x64
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	3332      	adds	r3, #50	; 0x32
 80023aa:	4a86      	ldr	r2, [pc, #536]	; (80025c4 <UART_SetConfig+0x384>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023b8:	4498      	add	r8, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	461d      	mov	r5, r3
 80023be:	f04f 0600 	mov.w	r6, #0
 80023c2:	46a9      	mov	r9, r5
 80023c4:	46b2      	mov	sl, r6
 80023c6:	eb19 0309 	adds.w	r3, r9, r9
 80023ca:	eb4a 040a 	adc.w	r4, sl, sl
 80023ce:	4699      	mov	r9, r3
 80023d0:	46a2      	mov	sl, r4
 80023d2:	eb19 0905 	adds.w	r9, r9, r5
 80023d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ee:	4689      	mov	r9, r1
 80023f0:	4692      	mov	sl, r2
 80023f2:	eb19 0005 	adds.w	r0, r9, r5
 80023f6:	eb4a 0106 	adc.w	r1, sl, r6
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	461d      	mov	r5, r3
 8002400:	f04f 0600 	mov.w	r6, #0
 8002404:	196b      	adds	r3, r5, r5
 8002406:	eb46 0406 	adc.w	r4, r6, r6
 800240a:	461a      	mov	r2, r3
 800240c:	4623      	mov	r3, r4
 800240e:	f7fd fee3 	bl	80001d8 <__aeabi_uldivmod>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	461a      	mov	r2, r3
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <UART_SetConfig+0x384>)
 800241a:	fba3 1302 	umull	r1, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2164      	movs	r1, #100	; 0x64
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	3332      	adds	r3, #50	; 0x32
 800242c:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <UART_SetConfig+0x384>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 0207 	and.w	r2, r3, #7
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4442      	add	r2, r8
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e26f      	b.n	8002922 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002442:	f7ff fe87 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8002446:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	461d      	mov	r5, r3
 800244c:	f04f 0600 	mov.w	r6, #0
 8002450:	46a8      	mov	r8, r5
 8002452:	46b1      	mov	r9, r6
 8002454:	eb18 0308 	adds.w	r3, r8, r8
 8002458:	eb49 0409 	adc.w	r4, r9, r9
 800245c:	4698      	mov	r8, r3
 800245e:	46a1      	mov	r9, r4
 8002460:	eb18 0805 	adds.w	r8, r8, r5
 8002464:	eb49 0906 	adc.w	r9, r9, r6
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002474:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002478:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800247c:	4688      	mov	r8, r1
 800247e:	4691      	mov	r9, r2
 8002480:	eb18 0005 	adds.w	r0, r8, r5
 8002484:	eb49 0106 	adc.w	r1, r9, r6
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	461d      	mov	r5, r3
 800248e:	f04f 0600 	mov.w	r6, #0
 8002492:	196b      	adds	r3, r5, r5
 8002494:	eb46 0406 	adc.w	r4, r6, r6
 8002498:	461a      	mov	r2, r3
 800249a:	4623      	mov	r3, r4
 800249c:	f7fd fe9c 	bl	80001d8 <__aeabi_uldivmod>
 80024a0:	4603      	mov	r3, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <UART_SetConfig+0x384>)
 80024a8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	461d      	mov	r5, r3
 80024b6:	f04f 0600 	mov.w	r6, #0
 80024ba:	46a9      	mov	r9, r5
 80024bc:	46b2      	mov	sl, r6
 80024be:	eb19 0309 	adds.w	r3, r9, r9
 80024c2:	eb4a 040a 	adc.w	r4, sl, sl
 80024c6:	4699      	mov	r9, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	eb19 0905 	adds.w	r9, r9, r5
 80024ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024e6:	4689      	mov	r9, r1
 80024e8:	4692      	mov	sl, r2
 80024ea:	eb19 0005 	adds.w	r0, r9, r5
 80024ee:	eb4a 0106 	adc.w	r1, sl, r6
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	461d      	mov	r5, r3
 80024f8:	f04f 0600 	mov.w	r6, #0
 80024fc:	196b      	adds	r3, r5, r5
 80024fe:	eb46 0406 	adc.w	r4, r6, r6
 8002502:	461a      	mov	r2, r3
 8002504:	4623      	mov	r3, r4
 8002506:	f7fd fe67 	bl	80001d8 <__aeabi_uldivmod>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	461a      	mov	r2, r3
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <UART_SetConfig+0x384>)
 8002512:	fba3 1302 	umull	r1, r3, r3, r2
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2164      	movs	r1, #100	; 0x64
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	3332      	adds	r3, #50	; 0x32
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <UART_SetConfig+0x384>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002532:	4498      	add	r8, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	461d      	mov	r5, r3
 8002538:	f04f 0600 	mov.w	r6, #0
 800253c:	46a9      	mov	r9, r5
 800253e:	46b2      	mov	sl, r6
 8002540:	eb19 0309 	adds.w	r3, r9, r9
 8002544:	eb4a 040a 	adc.w	r4, sl, sl
 8002548:	4699      	mov	r9, r3
 800254a:	46a2      	mov	sl, r4
 800254c:	eb19 0905 	adds.w	r9, r9, r5
 8002550:	eb4a 0a06 	adc.w	sl, sl, r6
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002568:	4689      	mov	r9, r1
 800256a:	4692      	mov	sl, r2
 800256c:	eb19 0005 	adds.w	r0, r9, r5
 8002570:	eb4a 0106 	adc.w	r1, sl, r6
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	461d      	mov	r5, r3
 800257a:	f04f 0600 	mov.w	r6, #0
 800257e:	196b      	adds	r3, r5, r5
 8002580:	eb46 0406 	adc.w	r4, r6, r6
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	f7fd fe26 	bl	80001d8 <__aeabi_uldivmod>
 800258c:	4603      	mov	r3, r0
 800258e:	460c      	mov	r4, r1
 8002590:	461a      	mov	r2, r3
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <UART_SetConfig+0x384>)
 8002594:	fba3 1302 	umull	r1, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	2164      	movs	r1, #100	; 0x64
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3332      	adds	r3, #50	; 0x32
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <UART_SetConfig+0x384>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 0207 	and.w	r2, r3, #7
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4442      	add	r2, r8
 80025b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80025ba:	e1b2      	b.n	8002922 <UART_SetConfig+0x6e2>
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40011400 	.word	0x40011400
 80025c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4ad7      	ldr	r2, [pc, #860]	; (800292c <UART_SetConfig+0x6ec>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d005      	beq.n	80025de <UART_SetConfig+0x39e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4ad6      	ldr	r2, [pc, #856]	; (8002930 <UART_SetConfig+0x6f0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 80d1 	bne.w	8002780 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025de:	f7ff fdcd 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 80025e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	469a      	mov	sl, r3
 80025e8:	f04f 0b00 	mov.w	fp, #0
 80025ec:	46d0      	mov	r8, sl
 80025ee:	46d9      	mov	r9, fp
 80025f0:	eb18 0308 	adds.w	r3, r8, r8
 80025f4:	eb49 0409 	adc.w	r4, r9, r9
 80025f8:	4698      	mov	r8, r3
 80025fa:	46a1      	mov	r9, r4
 80025fc:	eb18 080a 	adds.w	r8, r8, sl
 8002600:	eb49 090b 	adc.w	r9, r9, fp
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002618:	4688      	mov	r8, r1
 800261a:	4691      	mov	r9, r2
 800261c:	eb1a 0508 	adds.w	r5, sl, r8
 8002620:	eb4b 0609 	adc.w	r6, fp, r9
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	f04f 0400 	mov.w	r4, #0
 8002636:	0094      	lsls	r4, r2, #2
 8002638:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800263c:	008b      	lsls	r3, r1, #2
 800263e:	461a      	mov	r2, r3
 8002640:	4623      	mov	r3, r4
 8002642:	4628      	mov	r0, r5
 8002644:	4631      	mov	r1, r6
 8002646:	f7fd fdc7 	bl	80001d8 <__aeabi_uldivmod>
 800264a:	4603      	mov	r3, r0
 800264c:	460c      	mov	r4, r1
 800264e:	461a      	mov	r2, r3
 8002650:	4bb8      	ldr	r3, [pc, #736]	; (8002934 <UART_SetConfig+0x6f4>)
 8002652:	fba3 2302 	umull	r2, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	469b      	mov	fp, r3
 8002660:	f04f 0c00 	mov.w	ip, #0
 8002664:	46d9      	mov	r9, fp
 8002666:	46e2      	mov	sl, ip
 8002668:	eb19 0309 	adds.w	r3, r9, r9
 800266c:	eb4a 040a 	adc.w	r4, sl, sl
 8002670:	4699      	mov	r9, r3
 8002672:	46a2      	mov	sl, r4
 8002674:	eb19 090b 	adds.w	r9, r9, fp
 8002678:	eb4a 0a0c 	adc.w	sl, sl, ip
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002688:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800268c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002690:	4689      	mov	r9, r1
 8002692:	4692      	mov	sl, r2
 8002694:	eb1b 0509 	adds.w	r5, fp, r9
 8002698:	eb4c 060a 	adc.w	r6, ip, sl
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	0094      	lsls	r4, r2, #2
 80026b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026b4:	008b      	lsls	r3, r1, #2
 80026b6:	461a      	mov	r2, r3
 80026b8:	4623      	mov	r3, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	4631      	mov	r1, r6
 80026be:	f7fd fd8b 	bl	80001d8 <__aeabi_uldivmod>
 80026c2:	4603      	mov	r3, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b9a      	ldr	r3, [pc, #616]	; (8002934 <UART_SetConfig+0x6f4>)
 80026ca:	fba3 1302 	umull	r1, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2164      	movs	r1, #100	; 0x64
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	; 0x32
 80026dc:	4a95      	ldr	r2, [pc, #596]	; (8002934 <UART_SetConfig+0x6f4>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e8:	4498      	add	r8, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	469b      	mov	fp, r3
 80026ee:	f04f 0c00 	mov.w	ip, #0
 80026f2:	46d9      	mov	r9, fp
 80026f4:	46e2      	mov	sl, ip
 80026f6:	eb19 0309 	adds.w	r3, r9, r9
 80026fa:	eb4a 040a 	adc.w	r4, sl, sl
 80026fe:	4699      	mov	r9, r3
 8002700:	46a2      	mov	sl, r4
 8002702:	eb19 090b 	adds.w	r9, r9, fp
 8002706:	eb4a 0a0c 	adc.w	sl, sl, ip
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002716:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800271a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800271e:	4689      	mov	r9, r1
 8002720:	4692      	mov	sl, r2
 8002722:	eb1b 0509 	adds.w	r5, fp, r9
 8002726:	eb4c 060a 	adc.w	r6, ip, sl
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	0094      	lsls	r4, r2, #2
 800273e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002742:	008b      	lsls	r3, r1, #2
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	4628      	mov	r0, r5
 800274a:	4631      	mov	r1, r6
 800274c:	f7fd fd44 	bl	80001d8 <__aeabi_uldivmod>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	461a      	mov	r2, r3
 8002756:	4b77      	ldr	r3, [pc, #476]	; (8002934 <UART_SetConfig+0x6f4>)
 8002758:	fba3 1302 	umull	r1, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	2164      	movs	r1, #100	; 0x64
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	3332      	adds	r3, #50	; 0x32
 800276a:	4a72      	ldr	r2, [pc, #456]	; (8002934 <UART_SetConfig+0x6f4>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4442      	add	r2, r8
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	e0d0      	b.n	8002922 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002780:	f7ff fce8 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8002784:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	469a      	mov	sl, r3
 800278a:	f04f 0b00 	mov.w	fp, #0
 800278e:	46d0      	mov	r8, sl
 8002790:	46d9      	mov	r9, fp
 8002792:	eb18 0308 	adds.w	r3, r8, r8
 8002796:	eb49 0409 	adc.w	r4, r9, r9
 800279a:	4698      	mov	r8, r3
 800279c:	46a1      	mov	r9, r4
 800279e:	eb18 080a 	adds.w	r8, r8, sl
 80027a2:	eb49 090b 	adc.w	r9, r9, fp
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027ba:	4688      	mov	r8, r1
 80027bc:	4691      	mov	r9, r2
 80027be:	eb1a 0508 	adds.w	r5, sl, r8
 80027c2:	eb4b 0609 	adc.w	r6, fp, r9
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	f04f 0400 	mov.w	r4, #0
 80027d8:	0094      	lsls	r4, r2, #2
 80027da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027de:	008b      	lsls	r3, r1, #2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	4631      	mov	r1, r6
 80027e8:	f7fd fcf6 	bl	80001d8 <__aeabi_uldivmod>
 80027ec:	4603      	mov	r3, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b50      	ldr	r3, [pc, #320]	; (8002934 <UART_SetConfig+0x6f4>)
 80027f4:	fba3 2302 	umull	r2, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	469b      	mov	fp, r3
 8002802:	f04f 0c00 	mov.w	ip, #0
 8002806:	46d9      	mov	r9, fp
 8002808:	46e2      	mov	sl, ip
 800280a:	eb19 0309 	adds.w	r3, r9, r9
 800280e:	eb4a 040a 	adc.w	r4, sl, sl
 8002812:	4699      	mov	r9, r3
 8002814:	46a2      	mov	sl, r4
 8002816:	eb19 090b 	adds.w	r9, r9, fp
 800281a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800282e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002832:	4689      	mov	r9, r1
 8002834:	4692      	mov	sl, r2
 8002836:	eb1b 0509 	adds.w	r5, fp, r9
 800283a:	eb4c 060a 	adc.w	r6, ip, sl
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	0094      	lsls	r4, r2, #2
 8002852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002856:	008b      	lsls	r3, r1, #2
 8002858:	461a      	mov	r2, r3
 800285a:	4623      	mov	r3, r4
 800285c:	4628      	mov	r0, r5
 800285e:	4631      	mov	r1, r6
 8002860:	f7fd fcba 	bl	80001d8 <__aeabi_uldivmod>
 8002864:	4603      	mov	r3, r0
 8002866:	460c      	mov	r4, r1
 8002868:	461a      	mov	r2, r3
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <UART_SetConfig+0x6f4>)
 800286c:	fba3 1302 	umull	r1, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2164      	movs	r1, #100	; 0x64
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	3332      	adds	r3, #50	; 0x32
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <UART_SetConfig+0x6f4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288a:	4498      	add	r8, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	469b      	mov	fp, r3
 8002890:	f04f 0c00 	mov.w	ip, #0
 8002894:	46d9      	mov	r9, fp
 8002896:	46e2      	mov	sl, ip
 8002898:	eb19 0309 	adds.w	r3, r9, r9
 800289c:	eb4a 040a 	adc.w	r4, sl, sl
 80028a0:	4699      	mov	r9, r3
 80028a2:	46a2      	mov	sl, r4
 80028a4:	eb19 090b 	adds.w	r9, r9, fp
 80028a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028c0:	4689      	mov	r9, r1
 80028c2:	4692      	mov	sl, r2
 80028c4:	eb1b 0509 	adds.w	r5, fp, r9
 80028c8:	eb4c 060a 	adc.w	r6, ip, sl
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4619      	mov	r1, r3
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	f04f 0400 	mov.w	r4, #0
 80028de:	0094      	lsls	r4, r2, #2
 80028e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028e4:	008b      	lsls	r3, r1, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	4623      	mov	r3, r4
 80028ea:	4628      	mov	r0, r5
 80028ec:	4631      	mov	r1, r6
 80028ee:	f7fd fc73 	bl	80001d8 <__aeabi_uldivmod>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <UART_SetConfig+0x6f4>)
 80028fa:	fba3 1302 	umull	r1, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2164      	movs	r1, #100	; 0x64
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	3332      	adds	r3, #50	; 0x32
 800290c:	4a09      	ldr	r2, [pc, #36]	; (8002934 <UART_SetConfig+0x6f4>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4442      	add	r2, r8
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	e7ff      	b.n	8002922 <UART_SetConfig+0x6e2>
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800292c:	40011000 	.word	0x40011000
 8002930:	40011400 	.word	0x40011400
 8002934:	51eb851f 	.word	0x51eb851f

08002938 <__libc_init_array>:
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	4e0d      	ldr	r6, [pc, #52]	; (8002970 <__libc_init_array+0x38>)
 800293c:	4c0d      	ldr	r4, [pc, #52]	; (8002974 <__libc_init_array+0x3c>)
 800293e:	1ba4      	subs	r4, r4, r6
 8002940:	10a4      	asrs	r4, r4, #2
 8002942:	2500      	movs	r5, #0
 8002944:	42a5      	cmp	r5, r4
 8002946:	d109      	bne.n	800295c <__libc_init_array+0x24>
 8002948:	4e0b      	ldr	r6, [pc, #44]	; (8002978 <__libc_init_array+0x40>)
 800294a:	4c0c      	ldr	r4, [pc, #48]	; (800297c <__libc_init_array+0x44>)
 800294c:	f000 f820 	bl	8002990 <_init>
 8002950:	1ba4      	subs	r4, r4, r6
 8002952:	10a4      	asrs	r4, r4, #2
 8002954:	2500      	movs	r5, #0
 8002956:	42a5      	cmp	r5, r4
 8002958:	d105      	bne.n	8002966 <__libc_init_array+0x2e>
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002960:	4798      	blx	r3
 8002962:	3501      	adds	r5, #1
 8002964:	e7ee      	b.n	8002944 <__libc_init_array+0xc>
 8002966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800296a:	4798      	blx	r3
 800296c:	3501      	adds	r5, #1
 800296e:	e7f2      	b.n	8002956 <__libc_init_array+0x1e>
 8002970:	080029c8 	.word	0x080029c8
 8002974:	080029c8 	.word	0x080029c8
 8002978:	080029c8 	.word	0x080029c8
 800297c:	080029cc 	.word	0x080029cc

08002980 <memset>:
 8002980:	4402      	add	r2, r0
 8002982:	4603      	mov	r3, r0
 8002984:	4293      	cmp	r3, r2
 8002986:	d100      	bne.n	800298a <memset+0xa>
 8002988:	4770      	bx	lr
 800298a:	f803 1b01 	strb.w	r1, [r3], #1
 800298e:	e7f9      	b.n	8002984 <memset+0x4>

08002990 <_init>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr

0800299c <_fini>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr
